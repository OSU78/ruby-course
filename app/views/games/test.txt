peut tu me faire une class pour gerer un system de crud .
Je souhaite faire une app type phpmyadmin mais en beaucoup plus simple .
l'app affiche des donné disponible dans une db mysql distant (tu me donnera aussi la config pour la connexion à la db distante qui est sur railway ) .
Mon app ruby tourne sur un docker qui contient ça : 
version: '3.8'

services:

  dbms:
    image: mariadb
    container_name: mysql-api
    ports:
      - '3306:3306'
    environment: 
      - MYSQL_ALLOW_EMPTY_PASSWORD=false
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_PASSWORD=rootpassword
      - MYSQL_USER=admin
    volumes:
      - ./sql/dbms-data:/var/lib/mysql
      - ./sql/mariadb.cnf:/etc/mysql/mariadb.cnf
    command: 
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    networks:
      - net-api

  ruby-api:
    build: 
      context: .
      dockerfile: api/Dockerfile
    command: /bin/bash -c "while sleep 1000 ; do :; done"
    ports:
      - '3000:3000'
    volumes:
      - ./:/home/dev:cached
    depends_on:
      - dbms
    networks:
      - net-api

networks:
  net-api:
    driver: bridge
    name: net-api

--------
tu pourra gerer la partie connexion db avec mes id railwail : 
postgresql://postgres:-5DAc6ce661Bf*d-62a2FgdE2-2E-B45@roundhouse.proxy.rlwy.net:48415/railway
mdp = -5DAc6ce661Bf*d-62a2FgdE2-2E-B45
user = postgres
------
Aussi donne moi les dossiers dans lesquelle je doit crée chaque fichier.
voila la structure de ma db : 
create table
  public.games (
    id bigint generated by default as identity,
    name character varying null,
    price bigint null,
    banner text null,
 
  ) tablespace pg_default;

----
j'ai déja 2 fichier : 
# app/models/game.rb

class Game < ApplicationRecord
  # Valide la présence du nom et du prix, si vous en avez besoin
  # validates :name, :price, presence: true
end


et ça. : 
# app/controllers/games_controller.rb
require_relative '../crud_manager'

class GamesController < ApplicationController
  before_action :set_game, only: [:show, :edit, :update, :destroy]
  @@crud_manager = CrudManager.new(Game)

  def index
    @games = crud_manager.index
  end

  def show
  end

  def new
    @game = Game.new
  end

  def edit
    @game = Game.find(params[:id])
  end

  def create
    @game = crud_manager.create(game_params)

    if @game.persisted?
      redirect_to @game, notice: 'Game was successfully created.'
    else
      render :new
    end
  end

  def update
    @game = Game.find(params[:id])
    if @game.update(game_params)
      redirect_to @game, notice: 'Game was successfully updated.'
    else
      render :edit
    end
  end

  def destroy
    crud_manager.destroy(params[:id])
    redirect_to games_url, notice: 'Game was successfully destroyed.'
  end

  private

  def set_game
    @game = Game.find(params[:id])
  end

  def game_params
    params.require(:game).permit(:name, :price, :banner)
  end

  def crud_manager
    @@crud_manager
  end
end

-------
j'ai aussi les vue : 
app/views/games/index.html.erb : 
<!-- app/views/games/index.html.erb -->
<h1>Games List</h1>
<div class="games-container">
  <% @games.each do |game| %>
    <div class="game-card">
      <img src="<%= game.banner %>" alt="Game banner" class="game-banner"/>
      <div class="game-info">
        <h2><%= game.name %></h2>
        <p><%= number_to_currency(game.price) %></p>
      </div>
      <div class="game-actions">
        <%= link_to 'Edit', edit_game_path(game), class: 'button edit-button' %>
        <%= link_to 'Delete', game, method: :delete, data: { confirm: 'Are you sure?' }, class: 'button delete-button' %>
      </div>
    </div>
  <% end %>
</div>

<%= link_to 'Add Game', new_game_path, class: 'button add-button', id: 'add-game-button' %>

<div class="new-game-form" id="new-game-form">
  <%= render 'form', game: @game %>
</div>

<script>
  // Simple script to toggle the form display
  document.getElementById('add-game-button').addEventListener('click', function() {
    document.getElementById('new-game-form').style.display = 'flex';
  });
</script>

-----end-----


app/views/games/show.html.erb
<!-- app/views/games/show.html.erb -->
<div class="game-card">
  <img src="<%= @game.banner %>" alt="Game banner" class="game-banner"/>
  <div class="game-info">
    <h1><%= @game.name %></h1>
    <p><%= number_to_currency(@game.price) %></p>
    
      </div>
    </div>
    <div class="game-actions">
      <%= link_to 'Edit', edit_game_path(@game), class: 'button edit-button' %>
      <%= link_to 'Back to List', games_path, class: 'button' %>
    </div>


----end---

app/views/games/new.html.erb

<!-- app/views/games/new.html.erb -->
<h1>New Game</h1>
<div class="new-game-form">
<%= render 'form', game: @game %>
</div>

----end----

app/views/games/edit.html.erb

<!-- app/views/games/edit.html.erb -->
<h1>Edit Game</h1>
<div class="edit-game-form">
<%= render 'form', game: @game %>
</div>

--------end---
app/views/games/_form.html.erb
<!-- app/views/games/_form.html.erb -->
<%= raise 'Variable game is nil!' if game.nil? %>
<%= form_with(model: game, local: true) do |form| %>
  <% if game.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(game.errors.count, "error") %> prohibited this game from being saved:</h2>

      <ul>
      <% game.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  <div class="field">
    <%= form.label :name %>
    <%= form.text_field :name, id: :game_name %>
  </div>

  <div class="field">
    <%= form.label :banner %>
    <%= form.text_field :banner, id: :game_banner %>
  </div>

  <div class="field">
  <%= form.label :price %>
  <%= form.number_field :price, id: :game_price %>
  
    </div>
    <div class="actions">
      <%= form.submit class: 'button submit-button' %>
    </div>
  <% end %>

-----end--

et ma route : 
config/routes.rb
# config/routes.rb

Rails.application.routes.draw do
  root 'games#index'  # Adds root path to go directly to the games list
  resources :games
  # ... other routes ...
end

---------

